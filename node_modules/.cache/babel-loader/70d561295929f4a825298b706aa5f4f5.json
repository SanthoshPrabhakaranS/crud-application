{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = [{\n  id: '1',\n  networkName: 'Airtel',\n  description: 'Fastest 4G network'\n}];\nconst networkDataSlice = createSlice({\n  name: 'networkData',\n  initialState,\n  reducers: {\n    addNetwork: (state, action) => {\n      state.push(action.payload);\n    },\n    updateNetwork: (state, action) => {\n      const {\n        id,\n        networkName,\n        description\n      } = action.payload;\n      const existingUser = state.find(user => user.id === id);\n\n      if (existingUser) {\n        existingUser.networkName = networkName;\n        existingUser.description = description;\n      }\n    },\n    deleteNetwork: (state, action) => {\n      const {\n        id\n      } = action.payload;\n      const existingUser = state.find(network => network.id === id);\n\n      if (existingUser) {\n        return state.filter(network => network.id !== id);\n      }\n    }\n  }\n});\nexport default networkDataSlice.reducer;\nexport const {\n  addNetwork,\n  deleteNetwork,\n  updateNetwork\n} = networkDataSlice.actions;","map":{"version":3,"names":["createSlice","initialState","id","networkName","description","networkDataSlice","name","reducers","addNetwork","state","action","push","payload","updateNetwork","existingUser","find","user","deleteNetwork","network","filter","reducer","actions"],"sources":["/home/santhosh/Documents/workout-files/crud-app/crud-application/src/components/features/networkDataSlice.jsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nconst initialState = [{\r\n    id:'1',\r\n    networkName: 'Airtel',\r\n    description:'Fastest 4G network'\r\n}]\r\n\r\nconst networkDataSlice = createSlice({\r\n    name:'networkData',\r\n    initialState,\r\n    reducers: {\r\n        addNetwork: (state, action) => {\r\n            state.push(action.payload)\r\n        },\r\n        updateNetwork: (state, action) => {\r\n            const { id, networkName, description } = action.payload\r\n            const existingUser = state.find(user => user.id === id)\r\n            if(existingUser){\r\n                existingUser.networkName = networkName\r\n                existingUser.description = description\r\n            }\r\n        },\r\n\r\n        deleteNetwork: (state, action) => {\r\n            const { id } = action.payload\r\n            const existingUser = state.find(network => network.id === id)\r\n            if(existingUser){\r\n                return state.filter(network => network.id !== id)\r\n            }\r\n        },\r\n    }\r\n})\r\n\r\nexport default networkDataSlice.reducer\r\n\r\nexport const { addNetwork, deleteNetwork, updateNetwork } = networkDataSlice.actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,MAAMC,YAAY,GAAG,CAAC;EAClBC,EAAE,EAAC,GADe;EAElBC,WAAW,EAAE,QAFK;EAGlBC,WAAW,EAAC;AAHM,CAAD,CAArB;AAMA,MAAMC,gBAAgB,GAAGL,WAAW,CAAC;EACjCM,IAAI,EAAC,aAD4B;EAEjCL,YAFiC;EAGjCM,QAAQ,EAAE;IACNC,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC3BD,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;IACH,CAHK;IAINC,aAAa,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;MAC9B,MAAM;QAAER,EAAF;QAAMC,WAAN;QAAmBC;MAAnB,IAAmCM,MAAM,CAACE,OAAhD;MACA,MAAME,YAAY,GAAGL,KAAK,CAACM,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACd,EAAL,KAAYA,EAA/B,CAArB;;MACA,IAAGY,YAAH,EAAgB;QACZA,YAAY,CAACX,WAAb,GAA2BA,WAA3B;QACAW,YAAY,CAACV,WAAb,GAA2BA,WAA3B;MACH;IACJ,CAXK;IAaNa,aAAa,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;MAC9B,MAAM;QAAER;MAAF,IAASQ,MAAM,CAACE,OAAtB;MACA,MAAME,YAAY,GAAGL,KAAK,CAACM,IAAN,CAAWG,OAAO,IAAIA,OAAO,CAAChB,EAAR,KAAeA,EAArC,CAArB;;MACA,IAAGY,YAAH,EAAgB;QACZ,OAAOL,KAAK,CAACU,MAAN,CAAaD,OAAO,IAAIA,OAAO,CAAChB,EAAR,KAAeA,EAAvC,CAAP;MACH;IACJ;EAnBK;AAHuB,CAAD,CAApC;AA0BA,eAAeG,gBAAgB,CAACe,OAAhC;AAEA,OAAO,MAAM;EAAEZ,UAAF;EAAcS,aAAd;EAA6BJ;AAA7B,IAA+CR,gBAAgB,CAACgB,OAAtE"},"metadata":{},"sourceType":"module"}